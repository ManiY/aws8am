Cloudfront : 
--> 
____________________________________________________________________________________

D: 24/07/2020

ACM : Amazon Certificate Manager : 

Task : COnfigure https for website with ELB. 

Cloudtrail : Logging service.. Track all the aws usage.. : NO FREE TIER ELIGIBILITY
--> Enabled by default, 90 Days activities.. 
--> We can create a trail, and store all logs in s3 platform.

--> Management events : all activities : Management events are records of actions that are performed on or within resources in your AWS account. These are also known as control plane operations.

--> Data Events : s3 and Lambda : Data events are records of resource operations performed on or within a resource. These are also known as data plane operations. 

--> Insights events : Insights events are records that capture an unusual call volume of write management APIs

https://docs.aws.amazon.com/athena/latest/ug/cloudtrail-logs.html
--> SPlunk
--> DataDog
--> Cloudcheckr

AWS Config : Inventory and track the changes happening on resources.. NO FREE TIER..
Timeline for resources: 


AWS Trusted Advisor : 

Personal Health Dashboard : 

_______________________________________________________________________________________

D: 25/07/2020

AWS GLobal Accelerator: NEw certification topic..

AWS WAF : AWS Web Application Firewall : 
	--> Application ELB
	--> Cloudfront
	--> API Gateway

--> IP Matching
--> String Match
--> Bad Bots
--> Cross Site Scripts
--> SQL Injection

AWS Shield : Enabled bydefaultly for all the AWS accounts. DDoS attacks.. 

How to mitigate the DDoS attacks.. 

ELB
--> Use WAF
--> Use ASG backend
--> Use Cloudfront

AWS Inspector : 

AWS Shared Responsibility Model for Security :

--> Security "OF" the Cloud  : AWS : AZ, DC, Physical, Edge : XEN / Nitro.. 
--> Security "IN" the Cloud  : ec2 (22 : 0.0.0.0/0), weak pwd, s3 public, not using encrytpions


SQS : Simple Queue service : 

Monolithic application : SAP
Decoupled application : ASG

______________________________________________________________________________________
D: 27/07/2020

Lambda : Serverless architecture : 

https://www.youtube.com/watch?v=8gfSS-ZIulQ

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:Start*",
        "ec2:Stop*"
      ],
      "Resource": "*"
    }
  ]
}

Stops the EC2 instances
_________________________

import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.stop_instances(InstanceIds=instances)
    print('stopped your instances: ' + str(instances))
______________________________

Starts the EC2 instances
_____________________________
 
import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.start_instances(InstanceIds=instances)
    print('started your instances: ' + str(instances))

_______________________________________________________


EBS VOLUMES : If any volume is not associated to an ec2 instance, those volume details will send to the given SNS topic.

_____________________________________________________________________________________
import boto3
import json

client=boto3.client('ec2')
sns = boto3.client('sns')
sns_topic = "arn:aws:sns:ap-south-1:518084852393:S3Notifications"
sns_subject =  "Un-attached/not in use EBS Volumes"
Non_Compliant=[]
tags = {}

def lambda_handler(event, context):
    result = client.describe_volumes( Filters=[{'Name': 'status', 'Values': ['available']}])
    msg = "Hi Team," + "\n" + "Below is the list of available status Volumes details" + "\n"
    for volume in result['Volumes']:
        for tag in volume['Tags']:
            tags[tag['Key']] = tag['Value']
            #print(tags)
        if 'avlexception' in tags:
            print('Compliant volume',volume['VolumeId'])
        else:
            print('Non Compliant Volume/Not attached'+ volume['VolumeId'])
            noncompliant='Non Compliant Volume id %s' %volume['VolumeId']
            Non_Compliant.append(noncompliant)
            msg = msg + "\n" + noncompliant
            sns.publish(TopicArn='arn:aws:sns:ap-south-1:518084852393:S3Notifications', Message = "\n" + msg, Subject='EBS Volume in available status')
    # return Non_Compliant

______________________________________________________________________________________

Get a notification for UnEncrypted volumes.. 

_______________________________________________________

import boto3
import json
import sys

client=boto3.client('ec2')
sns = boto3.client('sns')
sns_topic = "arn:aws:sns:ap-south-1:518084852393:S3Notifications"
sns_subject =  "Non-Encrypted EBS Volumes"
Non_Compliant=[]


def lambda_handler(event, context):
    result = client.describe_volumes( Filters=[{'Name': 'encrypted', 'Values': ['false']},{'Name': 'attachment.device', 'Values': ['/dev/sdf','/dev/sdg','/dev/x*']}])
    msg = "Hi Team," + "\n" + "Below is the list of Non-Encrypted Volumes details" "\n" "Service Team please create and assigne ticket to Cloud Team" + "\n"
    #print(EBS_All)
    #object_contents = response['Volumes'][0]
    #EBS_Vol_All=EBS_All['Volumes']
    #print(EBS_Vol_All)
    for volume in result['Volumes']:
        #if 'Tags' in volume:
        tags = {}
        for tag in volume['Tags']:
            tags[tag['Key']] = tag['Value']
            #print(tags)
        if 'exception' in tags:
           # tags["Key"] != 'encryptexception':
            print(volume['VolumeId'])
        
        else:
            print("---" + volume['VolumeId'])
            noncompliant='Non Compliant Volume id %s.' %volume['VolumeId']
            Non_Compliant.append(noncompliant)
            msg = msg + "\n" + noncompliant
            sns.publish(TopicArn='arn:aws:sns:ap-south-1:518084852393:S3Notifications', Message = "\n" + msg, Subject='EBS Non Encrypted Volume')
    # return Non_Compliant

_______________________________________________________________________________


CloudFormation: YSON and YAML.. 
--> No Cost

https://www.youtube.com/watch?v=YYXdXT2l-Gg&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU



















































